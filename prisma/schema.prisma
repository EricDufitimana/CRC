generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  schemas   = ["auth", "public"]
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model admin {
  id             BigInt           @id @unique @default(autoincrement())
  user_id        String           @db.Uuid
  honorific      String?
  first_name     String
  last_name      String
  role           String
  email          String
  created_at     DateTime         @default(now()) @db.Timestamptz(6)
  essay_requests essay_requests[]
  opportunities  opportunities[]
  sent_referrals     essay_referrals[] @relation("from_admin")
  received_referrals essay_referrals[] @relation("to_admin")
  sent_opportunity_referrals     opportunity_referrals[] @relation("from_admin_opp")
  received_opportunity_referrals opportunity_referrals[] @relation("to_admin_opp")
  crc_classes    crc_class[]
  attendance_sessions attendance_sessions[]

  @@schema("public")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model essay_requests {
  id           BigInt    @id @unique @default(autoincrement())
  student_id   BigInt
  admin_id     BigInt
  title        String
  essay_link   String
  word_count   BigInt
  description  String
  deadline     DateTime? @db.Date
  submitted_at DateTime  @default(now()) @db.Timestamptz(6)
  completed_at DateTime? @db.Timestamptz(6)
  referred     Boolean   @default(false)
  status       status    @default(pending)
  admin        admin     @relation(fields: [admin_id], references: [id], onDelete: Cascade)
  students     students  @relation(fields: [student_id], references: [id], onUpdate: Restrict)
  essay_referrals essay_referrals[]

  @@schema("public")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model essay_referrals {
  id                    BigInt    @id @unique @default(autoincrement())
  essay_requested_id    BigInt
  from_admin_id         BigInt
  to_admin_id           BigInt
  completed_at          DateTime? @db.Timestamptz(6)
  referred_at           DateTime  @default(now()) @db.Timestamptz(6)
  has_completed         Boolean   @default(false)
  
  essay_requests        essay_requests @relation(fields: [essay_requested_id], references: [id], onDelete: Cascade)
  from_admin            admin     @relation("from_admin", fields: [from_admin_id], references: [id], onDelete: Cascade)
  to_admin              admin     @relation("to_admin", fields: [to_admin_id], references: [id], onDelete: Cascade)

  @@schema("public")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model opportunity_referrals {
  id                    BigInt    @id @unique @default(autoincrement())
  opportunity_id        BigInt
  from_admin_id         BigInt
  to_admin_id           BigInt
  completed_at          DateTime? @db.Timestamptz(6)
  referred_at           DateTime  @default(now()) @db.Timestamptz(6)
  has_completed         Boolean   @default(false)
  status                referral_status @default(pending)
  
  opportunities         opportunities @relation(fields: [opportunity_id], references: [id], onDelete: Cascade)
  from_admin            admin     @relation("from_admin_opp", fields: [from_admin_id], references: [id], onDelete: Cascade)
  to_admin              admin     @relation("to_admin_opp", fields: [to_admin_id], references: [id], onDelete: Cascade)

  @@schema("public")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model opportunities {
  id           BigInt    @id @unique @default(autoincrement())
  student_id   BigInt
  admin_id     BigInt
  title        String
  description  String
  deadline     DateTime? @db.Date
  link         String
  status       opportunity_status    @default(pending)
  referred     Boolean   @default(false)
  submitted_at DateTime  @default(now()) @db.Timestamptz(6)
  ai_category  String?
  reason       String?
  
  admin        admin     @relation(fields: [admin_id], references: [id], onDelete: Cascade)
  students     students  @relation(fields: [student_id], references: [id], onUpdate: Restrict)
  opportunity_referrals opportunity_referrals[]

  @@schema("public")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model profiles {
  id                 BigInt     @id @default(autoincrement())
  Names              String?
  user_id            String?    @db.Uuid
  email              String?
  created_at         DateTime   @default(now()) @db.Timestamptz(6)
  role               user_role? @default(student)
  is_new_user        Boolean?   @default(true)
  welcome_email_sent Boolean?   @default(false)

  @@schema("public")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model students {
  id                   BigInt           @id @default(autoincrement())
  student_id           String           @unique
  first_name           String           @unique
  last_name            String           @unique
  email                String           @unique

  date_of_registration DateTime?        @db.Date
  user_id              String?          @unique
  grade        grade?
  major_full   major_full?
  major_short  major_short?
  gpa          String?
  crc_class_id BigInt?
  
  crc_class    crc_class? @relation(fields: [crc_class_id], references: [id])
  essay_requests       essay_requests[]
  opportunities        opportunities[]
  submissions         submissions[]
  attendance_records   attendance_records[]

  @@schema("public")
}

enum aal_level {
  aal1
  aal2
  aal3

  @@schema("auth")
}

enum code_challenge_method {
  s256
  plain

  @@schema("auth")
}

enum factor_status {
  unverified
  verified

  @@schema("auth")
}

enum factor_type {
  totp
  webauthn
  phone

  @@schema("auth")
}

enum one_time_token_type {
  confirmation_token
  reauthentication_token
  recovery_token
  email_change_token_new
  email_change_token_current
  phone_change_token

  @@schema("auth")
}

enum user_role {
  student
  admin
  super_admin @map("super-admin")

  @@schema("public")
}

enum status {
  pending
  in_review
  completed

  @@schema("public")
}

enum opportunity_status {
  pending
  in_review
  accepted
  denied

  @@schema("public")
}

enum referral_status {
  pending
  accepted
  denied

  @@schema("public")
}

enum grade {
  Enrichment_Year @map("Enrichment Year")
  Senior_4 @map("Senior 4")
  Senior_5 @map("Senior 5")
  Senior_6 @map("Senior 6")

  @@schema("public")
}

enum major_full {
  Mathematics_Physics_Computer_Science @map("Mathematics-Physics-Computer Science")
  History_Geography_Literature @map("History-Geography-Literature")
  Physics_Chemistry_Biology @map("Physics-Chemistry-Biology")
  Mathematics_Computer_Science_Economics @map("Mathematics-Computer Science-Economics")
  Mathematics_Economics_Geography @map("Mathematics-Economics-Geography")

  @@schema("public")
}

enum major_short {
  MPC
  HGL
  PCB
  MCE
  MEG
  A 
  B 
  C 
  D 

  @@schema("public")
}

enum crc_classes {
  ey
  senior_4
  senior_5_group_a_b
  senior_5_customer_care
  senior_6_group_a_b
  senior_6_group_c
  senior_6_group_d

  @@schema("public")
}

enum submission_style {
  google_link
  file_upload

  @@schema("public")
}

enum attendance_status {
  present
  absent
  late
  excused

  @@schema("public")
}

enum notification_page {
  home
  new_opportunities
  recurring_opportunities
  templates
  crp
  internships
  english_language_learning
  approved_opportunities
  previous_events
  upcoming_events
  s4_workshops
  ey_workshops
  senior_5_group_a_b_workshops
  senior_5_customer_care
  senior_6_group_a_b_workshops
  senior_6_group_c_workshops
  senior_6_group_d
  job_readiness_course
  student_dashboard
  admin_dashboard

  @@schema("public")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model workshops {
  id              BigInt       @id @unique @default(autoincrement())
  title           String
  description     String
  has_assignment  Boolean      @default(false)
  date            DateTime     @db.Date
  presentation_url String?
  created_at      DateTime     @default(now()) @db.Timestamptz(6)
  assignments     assignments[]
  workshop_to_crc workshop_to_crc_class[] @relation("workshop_to_crc")
  attendance_sessions attendance_sessions[]

  @@schema("public")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model assignments {
  id               BigInt           @id @unique @default(autoincrement())
  workshop_id      BigInt?
  title            String
  description      String
  submission_idate DateTime         @db.Date
  submission_style submission_style
  created_at       DateTime         @default(now()) @db.Timestamptz(6)
  workshops        workshops?       @relation(fields: [workshop_id], references: [id], onDelete: SetNull)
  submissions      submissions[]

  @@schema("public")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model submissions {
  id                BigInt      @id @unique @default(autoincrement())
  assignment_id     BigInt
  student_id        BigInt
  google_doc_link   String?
  file_upload_link  String?
  submitted_at      DateTime    @default(now()) @db.Timestamptz(6)
  assignments       assignments @relation(fields: [assignment_id], references: [id], onDelete: Cascade)
  students          students    @relation(fields: [student_id], references: [id], onUpdate: Restrict)

  @@schema("public")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model announcements {
  id          BigInt    @id @unique @default(autoincrement())
  message     String
  end_time    DateTime? @db.Timestamptz(6)
  is_active   Boolean?  @default(true)
  created_at  DateTime? @default(now()) @db.Timestamptz(6)
  page        notification_page?

  @@schema("public")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model crc_class {
  id            BigInt     @id @unique @default(autoincrement())
  name          String
  created_by_id BigInt
  created_at    DateTime   @default(now()) @db.Timestamptz(6)

  admin         admin      @relation(fields: [created_by_id], references: [id], onDelete: Cascade)
  students      students[]
  workshop_to_crc workshop_to_crc_class[] @relation("crc_class_to_workshop")
  attendance_sessions attendance_sessions[]

  @@schema("public")
}

/// Junction table for many-to-many relationship between workshops and CRC classes
model workshop_to_crc_class {
  id          BigInt    @id @unique @default(autoincrement())
  workshop_id BigInt
  crc_class_id BigInt
  created_at  DateTime  @default(now()) @db.Timestamptz(6)

  workshop    workshops @relation("workshop_to_crc", fields: [workshop_id], references: [id], onDelete: Cascade)
  crc_class   crc_class @relation("crc_class_to_workshop", fields: [crc_class_id], references: [id], onDelete: Cascade)

  @@schema("public")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model attendance_sessions {
  id          BigInt    @id @unique @default(autoincrement())
  workshop_id BigInt
  crc_class_id BigInt
  admin_id    BigInt
  date        DateTime  @db.Date
  created_at  DateTime  @default(now()) @db.Timestamptz(6)
  updated_at  DateTime  @updatedAt @db.Timestamptz(6)

  workshop    workshops @relation(fields: [workshop_id], references: [id], onDelete: Cascade)
  crc_class   crc_class @relation(fields: [crc_class_id], references: [id], onDelete: Cascade)
  admin       admin     @relation(fields: [admin_id], references: [id], onDelete: Cascade)
  attendance_records attendance_records[]

  @@schema("public")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model attendance_records {
  id          BigInt    @id @unique @default(autoincrement())
  session_id  BigInt
  student_id  BigInt
  status      attendance_status
  created_at  DateTime  @default(now()) @db.Timestamptz(6)
  updated_at  DateTime  @updatedAt @db.Timestamptz(6)

  session     attendance_sessions @relation(fields: [session_id], references: [id], onDelete: Cascade)
  student     students           @relation(fields: [student_id], references: [id], onDelete: Cascade)

  @@schema("public")
}