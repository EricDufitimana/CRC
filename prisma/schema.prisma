generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  schemas   = ["auth", "public"]
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model admin {
  id                             BigInt                  @id @unique @default(autoincrement())
  user_id                        String                  @db.Uuid
  honorific                      String?
  first_name                     String
  last_name                      String
  role                           String
  created_at                     DateTime                @default(now()) @db.Timestamptz(6)
  email                          String?
  users                          users                   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  attendance_sessions            attendance_sessions[]
  crc_classes                    crc_class[]
  sent_referrals                 essay_referrals[]       @relation("from_admin")
  received_referrals             essay_referrals[]       @relation("to_admin")
  essay_requests                 essay_requests[]
  opportunities                  opportunities[]
  sent_opportunity_referrals     opportunity_referrals[] @relation("from_admin_opp")
  received_opportunity_referrals opportunity_referrals[] @relation("to_admin_opp")

  @@schema("public")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model essay_requests {
  id              BigInt            @id @unique @default(autoincrement())
  student_id      BigInt
  admin_id        BigInt
  title           String
  essay_link      String
  word_count      BigInt
  description     String
  deadline        DateTime?         @db.Date
  submitted_at    DateTime          @default(now()) @db.Timestamptz(6)
  referred        Boolean           @default(false)
  status          status            @default(pending)
  completed_at    DateTime?         @db.Timestamptz(6)
  essay_referrals essay_referrals[]
  admin           admin             @relation(fields: [admin_id], references: [id], onDelete: Cascade)
  students        students          @relation(fields: [student_id], references: [id], onUpdate: Restrict)

  @@schema("public")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model essay_referrals {
  id                 BigInt         @id @default(autoincrement())
  essay_requested_id BigInt
  from_admin_id      BigInt
  to_admin_id        BigInt
  referred_at        DateTime       @default(now()) @db.Timestamptz(6)
  has_completed      Boolean        @default(false)
  completed_at       DateTime?      @db.Timestamptz(6)
  essay_requests     essay_requests @relation(fields: [essay_requested_id], references: [id], onUpdate: Restrict)
  from_admin         admin          @relation("from_admin", fields: [from_admin_id], references: [id], onDelete: Cascade)
  to_admin           admin          @relation("to_admin", fields: [to_admin_id], references: [id], onDelete: Cascade)

  @@schema("public")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model opportunity_referrals {
  id             BigInt          @id @default(autoincrement())
  opportunity_id BigInt
  from_admin_id  BigInt
  to_admin_id    BigInt
  referred_at    DateTime        @default(now()) @db.Timestamptz(6)
  has_completed  Boolean         @default(false)
  completed_at   DateTime?       @db.Timestamptz(6)
  notes          String?
  created_at     DateTime        @default(now()) @db.Timestamptz(6)
  updated_at     DateTime        @default(now()) @db.Timestamptz(6)
  status         referral_status @default(pending)
  from_admin     admin           @relation("from_admin_opp", fields: [from_admin_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  opportunities  opportunities   @relation(fields: [opportunity_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  to_admin       admin           @relation("to_admin_opp", fields: [to_admin_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([from_admin_id], map: "idx_opportunity_referrals_from_admin_id")
  @@index([has_completed], map: "idx_opportunity_referrals_has_completed")
  @@index([opportunity_id], map: "idx_opportunity_referrals_opportunity_id")
  @@index([to_admin_id], map: "idx_opportunity_referrals_to_admin_id")
  @@schema("public")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model opportunities {
  id                    BigInt                  @id @unique @default(autoincrement())
  student_id            BigInt
  admin_id              BigInt
  title                 String
  description           String
  deadline              DateTime?               @db.Date
  ai_category           String?
  submitted_at          DateTime                @default(now()) @db.Timestamptz(6)
  link                  String
  referred              Boolean                 @default(false)
  status                opportunity_status      @default(pending)
  reason                String?
  accepted_at           DateTime?               @db.Timestamp(6)
  admin                 admin                   @relation(fields: [admin_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  students              students                @relation(fields: [student_id], references: [id], onUpdate: Restrict)
  opportunity_referrals opportunity_referrals[]

  @@schema("public")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model profiles {
  id                 BigInt     @id @default(autoincrement())
  Names              String?
  user_id            String?    @unique @db.Uuid
  created_at         DateTime   @default(now()) @db.Timestamptz(6)
  role               user_role? @default(student)
  is_new_user        Boolean    @default(true)
  has_setup          Boolean    @default(false)
  welcome_email_sent Boolean    @default(false)
  email              String?    @db.VarChar
  users              users?     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@schema("public")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model students {
  id                   BigInt               @id @default(autoincrement())
  student_id           String               @unique
  first_name           String
  last_name            String
  email                String
  profile_picture      String?
  date_of_registration DateTime?            @db.Timestamp(6)
  user_id              String?              @unique @db.Uuid
  grade                grade?
  major_full           major_full?
  major_short          major_short?
  gpa                  String?
  crc_class_id         BigInt?
  profile_background   profile_background?  @default(statColors_4)
  academic_report_path String?
  resume_link          String?
  attendance_records   attendance_records[]
  essay_requests       essay_requests[]
  opportunities        opportunities[]
  crc_class            crc_class?           @relation(fields: [crc_class_id], references: [id], onDelete: Cascade)
  users                users?               @relation(fields: [user_id], references: [id], onDelete: Cascade)
  submissions          submissions[]

  @@schema("public")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model workshops {
  id                  BigInt                  @id @unique @default(autoincrement())
  title               String
  description         String
  has_assignment      Boolean                 @default(false)
  date                DateTime                @db.Date
  presentation_url    String?
  created_at          DateTime                @default(now()) @db.Timestamptz(6)
  assignments         assignments[]
  attendance_sessions attendance_sessions[]
  workshop_to_crc     workshop_to_crc_class[] @relation("workshop_to_crc")

  @@schema("public")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model assignments {
  id               BigInt           @id @default(autoincrement())
  workshop_id      BigInt?
  title            String
  description      String
  submission_idate DateTime         @db.Timestamp(6)
  submission_style submission_style
  created_at       DateTime         @default(now()) @db.Timestamptz(6)
  workshops        workshops?       @relation(fields: [workshop_id], references: [id], onDelete: Cascade)
  submissions      submissions[]

  @@schema("public")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model submissions {
  id               BigInt      @id @unique @default(autoincrement())
  assignment_id    BigInt
  student_id       BigInt
  google_doc_link  String?
  file_upload_link String?
  submitted_at     DateTime    @default(now()) @db.Timestamptz(6)
  assignments      assignments @relation(fields: [assignment_id], references: [id], onDelete: Cascade)
  students         students    @relation(fields: [student_id], references: [id], onDelete: Cascade)

  @@schema("public")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model announcements {
  id         BigInt             @id(map: "notifications_pkey") @default(autoincrement())
  message    String
  end_time   DateTime?          @db.Timestamptz(6)
  is_active  Boolean?           @default(true)
  created_at DateTime?          @default(now()) @db.Timestamptz(6)
  page       notification_page?

  @@schema("public")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model crc_class {
  id                  BigInt                  @id @unique @default(autoincrement())
  name                String
  created_by_id       BigInt
  created_at          DateTime                @default(now()) @db.Timestamptz(6)
  attendance_sessions attendance_sessions[]
  admin               admin                   @relation(fields: [created_by_id], references: [id], onDelete: Cascade)
  students            students[]
  workshop_to_crc     workshop_to_crc_class[] @relation("crc_class_to_workshop")

  @@schema("public")
}

/// Junction table for many-to-many relationship between workshops and CRC classes
model workshop_to_crc_class {
  id           BigInt    @id @default(autoincrement())
  workshop_id  BigInt
  crc_class_id BigInt
  created_at   DateTime  @default(now()) @db.Timestamptz(6)
  crc_class    crc_class @relation("crc_class_to_workshop", fields: [crc_class_id], references: [id], onDelete: Cascade)
  workshop     workshops @relation("workshop_to_crc", fields: [workshop_id], references: [id], onDelete: Cascade)

  @@schema("public")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model attendance_sessions {
  id                 BigInt               @id @unique @default(autoincrement())
  workshop_id        BigInt
  crc_class_id       BigInt
  taken_by           BigInt
  taken_at           DateTime             @default(now()) @db.Timestamptz(6)
  attendance_records attendance_records[]
  crc_class          crc_class            @relation(fields: [crc_class_id], references: [id], onDelete: Cascade)
  admin              admin                @relation(fields: [taken_by], references: [id], onDelete: Cascade)
  workshop           workshops            @relation(fields: [workshop_id], references: [id], onDelete: Cascade)

  @@schema("public")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model attendance_records {
  id         BigInt              @id @unique @default(autoincrement())
  session_id BigInt
  student_id BigInt
  status     attendance_status
  created_at DateTime            @default(now()) @db.Timestamptz(6)
  session    attendance_sessions @relation(fields: [session_id], references: [id], onDelete: Cascade)
  student    students            @relation(fields: [student_id], references: [id], onDelete: Cascade)

  @@schema("public")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model audit_log_entries {
  instance_id String?   @db.Uuid
  id          String    @id @db.Uuid
  payload     Json?     @db.Json
  created_at  DateTime? @db.Timestamptz(6)
  ip_address  String    @default("") @db.VarChar(64)

  @@index([instance_id], map: "audit_logs_instance_id_idx")
  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model flow_state {
  id                     String                @id @db.Uuid
  user_id                String?               @db.Uuid
  auth_code              String
  code_challenge_method  code_challenge_method
  code_challenge         String
  provider_type          String
  provider_access_token  String?
  provider_refresh_token String?
  created_at             DateTime?             @db.Timestamptz(6)
  updated_at             DateTime?             @db.Timestamptz(6)
  authentication_method  String
  auth_code_issued_at    DateTime?             @db.Timestamptz(6)
  saml_relay_states      saml_relay_states[]

  @@index([created_at(sort: Desc)])
  @@index([auth_code], map: "idx_auth_code")
  @@index([user_id, authentication_method], map: "idx_user_id_auth_method")
  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model identities {
  provider_id     String
  user_id         String    @db.Uuid
  identity_data   Json
  provider        String
  last_sign_in_at DateTime? @db.Timestamptz(6)
  created_at      DateTime? @db.Timestamptz(6)
  updated_at      DateTime? @db.Timestamptz(6)
  email           String?   @default(dbgenerated("lower((identity_data ->> 'email'::text))"))
  id              String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  users           users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([provider_id, provider], map: "identities_provider_id_provider_unique")
  @@index([email])
  @@index([user_id])
  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model instances {
  id              String    @id @db.Uuid
  uuid            String?   @db.Uuid
  raw_base_config String?
  created_at      DateTime? @db.Timestamptz(6)
  updated_at      DateTime? @db.Timestamptz(6)

  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model mfa_amr_claims {
  session_id            String   @db.Uuid
  created_at            DateTime @db.Timestamptz(6)
  updated_at            DateTime @db.Timestamptz(6)
  authentication_method String
  id                    String   @id(map: "amr_id_pk") @db.Uuid
  sessions              sessions @relation(fields: [session_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([session_id, authentication_method], map: "mfa_amr_claims_session_id_authentication_method_pkey")
  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model mfa_challenges {
  id                     String      @id @db.Uuid
  factor_id              String      @db.Uuid
  created_at             DateTime    @db.Timestamptz(6)
  verified_at            DateTime?   @db.Timestamptz(6)
  ip_address             String      @db.Inet
  otp_code               String?
  web_authn_session_data Json?
  mfa_factors            mfa_factors @relation(fields: [factor_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "mfa_challenges_auth_factor_id_fkey")

  @@index([created_at(sort: Desc)], map: "mfa_challenge_created_at_idx")
  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model mfa_factors {
  id                   String           @id @db.Uuid
  user_id              String           @db.Uuid
  friendly_name        String?
  factor_type          factor_type
  status               factor_status
  created_at           DateTime         @db.Timestamptz(6)
  updated_at           DateTime         @db.Timestamptz(6)
  secret               String?
  phone                String?
  last_challenged_at   DateTime?        @unique @db.Timestamptz(6)
  web_authn_credential Json?
  web_authn_aaguid     String?          @db.Uuid
  mfa_challenges       mfa_challenges[]
  users                users            @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([user_id, phone], map: "unique_phone_factor_per_user")
  @@index([user_id, created_at], map: "factor_id_created_at_idx")
  @@index([user_id])
  @@schema("auth")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model one_time_tokens {
  id         String              @id @db.Uuid
  user_id    String              @db.Uuid
  token_type one_time_token_type
  token_hash String
  relates_to String
  created_at DateTime            @default(now()) @db.Timestamp(6)
  updated_at DateTime            @default(now()) @db.Timestamp(6)
  users      users               @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([user_id, token_type])
  @@index([relates_to], map: "one_time_tokens_relates_to_hash_idx", type: Hash)
  @@index([token_hash], map: "one_time_tokens_token_hash_hash_idx", type: Hash)
  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model refresh_tokens {
  instance_id String?   @db.Uuid
  id          BigInt    @id @default(autoincrement())
  token       String?   @unique(map: "refresh_tokens_token_unique") @db.VarChar(255)
  user_id     String?   @db.VarChar(255)
  revoked     Boolean?
  created_at  DateTime? @db.Timestamptz(6)
  updated_at  DateTime? @db.Timestamptz(6)
  parent      String?   @db.VarChar(255)
  session_id  String?   @db.Uuid
  sessions    sessions? @relation(fields: [session_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([instance_id])
  @@index([instance_id, user_id])
  @@index([parent])
  @@index([session_id, revoked])
  @@index([updated_at(sort: Desc)])
  @@schema("auth")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model saml_providers {
  id                String        @id @db.Uuid
  sso_provider_id   String        @db.Uuid
  entity_id         String        @unique
  metadata_xml      String
  metadata_url      String?
  attribute_mapping Json?
  created_at        DateTime?     @db.Timestamptz(6)
  updated_at        DateTime?     @db.Timestamptz(6)
  name_id_format    String?
  sso_providers     sso_providers @relation(fields: [sso_provider_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([sso_provider_id])
  @@schema("auth")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model saml_relay_states {
  id              String        @id @db.Uuid
  sso_provider_id String        @db.Uuid
  request_id      String
  for_email       String?
  redirect_to     String?
  created_at      DateTime?     @db.Timestamptz(6)
  updated_at      DateTime?     @db.Timestamptz(6)
  flow_state_id   String?       @db.Uuid
  flow_state      flow_state?   @relation(fields: [flow_state_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  sso_providers   sso_providers @relation(fields: [sso_provider_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([created_at(sort: Desc)])
  @@index([for_email])
  @@index([sso_provider_id])
  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model schema_migrations {
  version String @id @db.VarChar(255)

  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model sessions {
  id             String           @id @db.Uuid
  user_id        String           @db.Uuid
  created_at     DateTime?        @db.Timestamptz(6)
  updated_at     DateTime?        @db.Timestamptz(6)
  factor_id      String?          @db.Uuid
  aal            aal_level?
  not_after      DateTime?        @db.Timestamptz(6)
  refreshed_at   DateTime?        @db.Timestamp(6)
  user_agent     String?
  ip             String?          @db.Inet
  tag            String?
  mfa_amr_claims mfa_amr_claims[]
  refresh_tokens refresh_tokens[]
  users          users            @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([not_after(sort: Desc)])
  @@index([user_id])
  @@index([user_id, created_at], map: "user_id_created_at_idx")
  @@schema("auth")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model sso_domains {
  id              String        @id @db.Uuid
  sso_provider_id String        @db.Uuid
  domain          String
  created_at      DateTime?     @db.Timestamptz(6)
  updated_at      DateTime?     @db.Timestamptz(6)
  sso_providers   sso_providers @relation(fields: [sso_provider_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([sso_provider_id])
  @@schema("auth")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model sso_providers {
  id                String              @id @db.Uuid
  resource_id       String?
  created_at        DateTime?           @db.Timestamptz(6)
  updated_at        DateTime?           @db.Timestamptz(6)
  saml_providers    saml_providers[]
  saml_relay_states saml_relay_states[]
  sso_domains       sso_domains[]

  @@schema("auth")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model users {
  instance_id                 String?           @db.Uuid
  id                          String            @id @db.Uuid
  aud                         String?           @db.VarChar(255)
  role                        String?           @db.VarChar(255)
  email                       String?           @db.VarChar(255)
  encrypted_password          String?           @db.VarChar(255)
  email_confirmed_at          DateTime?         @db.Timestamptz(6)
  invited_at                  DateTime?         @db.Timestamptz(6)
  confirmation_token          String?           @db.VarChar(255)
  confirmation_sent_at        DateTime?         @db.Timestamptz(6)
  recovery_token              String?           @db.VarChar(255)
  recovery_sent_at            DateTime?         @db.Timestamptz(6)
  email_change_token_new      String?           @db.VarChar(255)
  email_change                String?           @db.VarChar(255)
  email_change_sent_at        DateTime?         @db.Timestamptz(6)
  last_sign_in_at             DateTime?         @db.Timestamptz(6)
  raw_app_meta_data           Json?
  raw_user_meta_data          Json?
  is_super_admin              Boolean?
  created_at                  DateTime?         @db.Timestamptz(6)
  updated_at                  DateTime?         @db.Timestamptz(6)
  phone                       String?           @unique
  phone_confirmed_at          DateTime?         @db.Timestamptz(6)
  phone_change                String?           @default("")
  phone_change_token          String?           @default("") @db.VarChar(255)
  phone_change_sent_at        DateTime?         @db.Timestamptz(6)
  confirmed_at                DateTime?         @default(dbgenerated("LEAST(email_confirmed_at, phone_confirmed_at)")) @db.Timestamptz(6)
  email_change_token_current  String?           @default("") @db.VarChar(255)
  email_change_confirm_status Int?              @default(0) @db.SmallInt
  banned_until                DateTime?         @db.Timestamptz(6)
  reauthentication_token      String?           @default("") @db.VarChar(255)
  reauthentication_sent_at    DateTime?         @db.Timestamptz(6)
  is_sso_user                 Boolean           @default(false)
  deleted_at                  DateTime?         @db.Timestamptz(6)
  is_anonymous                Boolean           @default(false)
  identities                  identities[]
  mfa_factors                 mfa_factors[]
  one_time_tokens             one_time_tokens[]
  sessions                    sessions[]
  admin                       admin[]
  profiles                    profiles?
  students                    students?

  @@index([instance_id])
  @@index([is_anonymous])
  @@schema("auth")
}

enum aal_level {
  aal1
  aal2
  aal3

  @@schema("auth")
}

enum code_challenge_method {
  s256
  plain

  @@schema("auth")
}

enum factor_status {
  unverified
  verified

  @@schema("auth")
}

enum factor_type {
  totp
  webauthn
  phone

  @@schema("auth")
}

enum one_time_token_type {
  confirmation_token
  reauthentication_token
  recovery_token
  email_change_token_new
  email_change_token_current
  phone_change_token

  @@schema("auth")
}

enum user_role {
  student
  admin
  super_admin @map("super-admin")

  @@schema("public")
}

enum status {
  pending
  in_review
  completed

  @@schema("public")
}

enum opportunity_status {
  pending
  in_review
  accepted
  denied

  @@schema("public")
}

enum referral_status {
  pending
  accepted
  denied

  @@schema("public")
}

enum grade {
  Enrichment_Year @map("Enrichment Year")
  Senior_4        @map("Senior 4")
  Senior_5        @map("Senior 5")
  Senior_6        @map("Senior 6")

  @@schema("public")
}

enum major_full {
  Mathematics_Physics_Computer_Science   @map("Mathematics-Physics-Computer Science")
  History_Geography_Literature           @map("History-Geography-Literature")
  Physics_Chemistry_Biology              @map("Physics-Chemistry-Biology")
  Mathematics_Computer_Science_Economics @map("Mathematics-Computer Science-Economics")
  Mathematics_Economics_Geography        @map("Mathematics-Economics-Geography")

  @@schema("public")
}

enum major_short {
  MPC
  HGL
  PCB
  MCE
  MEG
  A
  B
  C
  D

  @@schema("public")
}

enum crc_classes {
  ey
  senior_4
  senior_5_group_a_b
  senior_5_customer_care
  senior_6_group_a_b
  senior_6_group_c
  senior_6_group_d

  @@schema("public")
}

enum submission_style {
  google_link
  file_upload

  @@schema("public")
}

enum attendance_status {
  present
  absent
  late
  excused

  @@schema("public")
}

enum notification_page {
  home
  new_opportunities
  recurring_opportunities
  templates
  crp
  internships
  english_language_learning
  approved_opportunities
  previous_events
  upcoming_events
  s4_workshops
  ey_workshops
  senior_5_group_a_b_workshops
  senior_5_customer_care
  senior_6_group_a_b_workshops
  senior_6_group_c_workshops
  senior_6_group_d
  job_readiness_course
  student_dashboard
  admin_dashboard

  @@schema("public")
}

enum duration {
  twenty_min @map("20_min")
  forty_min @map("40_min")
  sixty_min @map("60_min")

  @@schema("public")
}

enum priority {
  high
  medium
  low

  @@schema("public")
}

enum profile_background {
  statColors_1 @map("statColors-1")
  statColors_2 @map("statColors-2")
  statColors_3 @map("statColors-3")
  statColors_4 @map("statColors-4")
  statColors_5 @map("statColors-5")
  statColors_6 @map("statColors-6")
  statColors_7 @map("statColors-7")
  statColors_8 @map("statColors-8")
  statColors_9 @map("statColors-9")
  white

  @@schema("public")
}
